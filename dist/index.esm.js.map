{"version":3,"file":"index.esm.js","sources":["../lib/utils/uiAdapters.js","../lib/utils/jsonUtils.js","../lib/components/JsonToFields.jsx"],"sourcesContent":["// UI Library Adapters\n// This file provides adapters for different UI libraries\n\nexport const getUIComponents = () => {\n  // All UI libraries use the same HTML elements as base\n  // The styling is handled through classes and props\n  return {\n    Container: 'div',\n    Box: 'div',\n    Button: 'button',\n    Input: 'input',\n    Select: 'select',\n    Textarea: 'textarea',\n    Table: 'table',\n    Thead: 'thead',\n    Tbody: 'tbody',\n    Tr: 'tr',\n    Th: 'th',\n    Td: 'td',\n    Text: 'span',\n    Heading: 'h2',\n    Stack: 'div',\n    HStack: 'div',\n    VStack: 'div',\n    Card: 'div',\n    Alert: 'div',\n    Badge: 'span',\n    Grid: 'div',\n    GridItem: 'div',\n    Flex: 'div',\n    Label: 'label',\n  }\n}\n\nexport const getUIClasses = (uiLibrary = 'chakra', component, variant = 'default') => {\n  const classMap = {\n    tailwind: {\n      Container: 'max-w-7xl mx-auto px-4 sm:px-6 lg:px-8',\n      Box: 'block',\n      Button: {\n        default:\n          'inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500',\n        secondary:\n          'inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500',\n      },\n      Input: {\n        default:\n          'block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm',\n        checkbox: 'h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded',\n      },\n      Select:\n        'block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm',\n      Textarea:\n        'block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm resize-vertical',\n      Table: 'min-w-full divide-y divide-gray-200',\n      Thead: 'bg-gray-50',\n      Tbody: 'bg-white divide-y divide-gray-200',\n      Tr: 'hover:bg-gray-50',\n      Th: 'px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider',\n      Td: 'px-6 py-4 whitespace-nowrap text-sm text-gray-900',\n      Text: 'text-gray-900',\n      Heading: 'text-2xl font-bold text-gray-900 mb-4',\n      Stack: 'space-y-4',\n      HStack: 'flex space-x-4 items-center',\n      VStack: 'flex flex-col space-y-4',\n      Card: 'bg-white overflow-hidden shadow rounded-lg p-6',\n      Alert: {\n        error: 'bg-red-50 border border-red-200 rounded-md p-4 text-red-800',\n        success: 'bg-green-50 border border-green-200 rounded-md p-4 text-green-800',\n        warning: 'bg-yellow-50 border border-yellow-200 rounded-md p-4 text-yellow-800',\n        info: 'bg-blue-50 border border-blue-200 rounded-md p-4 text-blue-800',\n      },\n      Badge:\n        'inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800',\n      Grid: 'grid',\n      GridItem: '',\n      Flex: 'flex',\n      Label: 'block text-sm font-medium text-gray-700',\n    },\n    shadcn: {\n      Container: 'container mx-auto px-4',\n      Box: 'block',\n      Button: {\n        default:\n          'inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 bg-primary text-primary-foreground hover:bg-primary/90 h-10 px-4 py-2',\n        secondary:\n          'inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 bg-secondary text-secondary-foreground hover:bg-secondary/80 h-10 px-4 py-2',\n      },\n      Input: {\n        default:\n          'flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50',\n        checkbox:\n          'h-4 w-4 rounded border border-primary text-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50',\n      },\n      Select:\n        'flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50',\n      Textarea:\n        'flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50',\n      Table: 'w-full caption-bottom text-sm',\n      Thead: '[&_tr]:border-b',\n      Tbody: '[&_tr:last-child]:border-0',\n      Tr: 'border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted',\n      Th: 'h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0',\n      Td: 'p-4 align-middle [&:has([role=checkbox])]:pr-0',\n      Text: 'text-sm text-muted-foreground',\n      Heading: 'scroll-m-20 text-2xl font-semibold tracking-tight',\n      Stack: 'flex flex-col space-y-4',\n      HStack: 'flex space-x-4',\n      VStack: 'flex flex-col space-y-4',\n      Card: 'rounded-lg border bg-card text-card-foreground shadow-sm',\n      Alert: {\n        error:\n          'relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive',\n        success:\n          'relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground',\n        warning:\n          'relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground',\n        info: 'relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground',\n      },\n      Badge:\n        'inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2',\n      Grid: 'grid',\n      GridItem: '',\n      Flex: 'flex',\n      Label:\n        'text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70',\n    },\n  }\n\n  if (uiLibrary === 'chakra') {\n    return '' // Chakra UI uses props, not classes\n  }\n\n  const libraryClasses = classMap[uiLibrary]\n  if (!libraryClasses || !libraryClasses[component]) {\n    return ''\n  }\n\n  const componentClasses = libraryClasses[component]\n  if (typeof componentClasses === 'object') {\n    return componentClasses[variant] || componentClasses.default || ''\n  }\n\n  return componentClasses\n}\n","/**\n * Utility functions for JSON parsing and object manipulation\n */\n\n/**\n * Flatten nested objects into dot-notation keys\n * @param {Object} obj - Object to flatten\n * @param {string} prefix - Key prefix for nested properties\n * @returns {Object} Flattened object\n */\nexport const flattenObject = (obj, prefix = '') => {\n  let flattened = {}\n\n  for (let key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      const newKey = prefix ? `${prefix}.${key}` : key\n\n      if (typeof obj[key] === 'object' && obj[key] !== null && !Array.isArray(obj[key])) {\n        Object.assign(flattened, flattenObject(obj[key], newKey))\n      } else {\n        flattened[newKey] = obj[key]\n      }\n    }\n  }\n\n  return flattened\n}\n\n/**\n * Convert flattened object back to nested structure\n * @param {Object} flat - Flattened object with dot-notation keys\n * @returns {Object} Nested object\n */\nexport const unflattenObject = (flat) => {\n  const result = {}\n\n  for (let key in flat) {\n    const keys = key.split('.')\n    let current = result\n\n    for (let i = 0; i < keys.length - 1; i++) {\n      if (!current[keys[i]]) {\n        current[keys[i]] = {}\n      }\n      current = current[keys[i]]\n    }\n\n    current[keys[keys.length - 1]] = flat[key]\n  }\n\n  return result\n}\n\n/**\n * Determine input type based on value and optional field configuration\n * @param {any} value - Value to check\n * @param {string} key - Field key/name\n * @param {Object} fieldConfig - Optional field configuration override\n * @returns {Object} Field type configuration\n */\nexport const getInputType = (value, key = '', fieldConfig = {}) => {\n  // 1. Check explicit field configuration first\n  if (fieldConfig[key]) {\n    return { type: fieldConfig[key].type, ...fieldConfig[key] }\n  }\n\n  // 2. Basic type detection\n  if (typeof value === 'boolean') return { type: 'checkbox' }\n  if (typeof value === 'number') return { type: 'number' }\n  if (Array.isArray(value)) return { type: 'array', items: value }\n  if (typeof value === 'object' && value !== null) return { type: 'object' }\n\n  // 3. Enhanced string analysis\n  if (typeof value === 'string') {\n    // Long text detection\n    if (value.length > 100) return { type: 'textarea', rows: 4 }\n\n    // Email detection\n    if (value.includes('@') || key.toLowerCase().includes('email')) {\n      return { type: 'email' }\n    }\n\n    // URL detection\n    if (value.startsWith('http') || key.toLowerCase().includes('url')) {\n      return { type: 'url' }\n    }\n\n    // Date detection\n    if (value.match(/^\\d{4}-\\d{2}-\\d{2}$/) || key.toLowerCase().includes('date')) {\n      return { type: 'date' }\n    }\n\n    // Password detection\n    if (key.toLowerCase().includes('password')) {\n      return { type: 'password' }\n    }\n  }\n\n  // 4. Fallback to text\n  return { type: 'text' }\n}\n\n/**\n * Parse JSON string safely\n * @param {string} jsonString - JSON string to parse\n * @returns {Object} Parsed object or error\n */\nexport const parseJsonSafely = (jsonString) => {\n  try {\n    const parsed = JSON.parse(jsonString)\n    return { success: true, data: parsed }\n  } catch (error) {\n    return { success: false, error: error.message }\n  }\n}\n\n/**\n * Format JSON string with proper indentation\n * @param {any} obj - Object to stringify\n * @param {number} spaces - Number of spaces for indentation\n * @returns {string} Formatted JSON string\n */\nexport const formatJson = (obj, spaces = 2) => {\n  return JSON.stringify(obj, null, spaces)\n}\n\n/**\n * Get nested level from key\n * @param {string} key - Dot-notation key\n * @returns {number} Nesting level\n */\nexport const getNestedLevel = (key) => {\n  return key.split('.').length - 1\n}\n\n/**\n * Get display name from key\n * @param {string} key - Dot-notation key\n * @returns {string} Display name\n */\nexport const getDisplayName = (key) => {\n  return key\n    .split('.')\n    .pop()\n    .replace(/([A-Z])/g, ' $1') // Add space before capital letters\n    .replace(/[_-]/g, ' ') // Replace underscores and hyphens with spaces\n    .replace(/\\b\\w/g, (l) => l.toUpperCase()) // Capitalize first letter of each word\n    .trim()\n}\n","import React, { useState, useEffect, useCallback } from 'react'\nimport { getUIClasses as _getUIClasses } from '../utils/uiAdapters'\nimport {\n  flattenObject,\n  unflattenObject,\n  getInputType,\n  parseJsonSafely,\n  getDisplayName,\n} from '../utils/jsonUtils'\n\n/**\n * Fields Component - UI Library Agnostic\n * @param {Object} props - Component props\n * @param {string} props.uiLibrary - (deprecated, ignored in headless)\n * @param {Object} [props.classNames] - slot classes for headless styling\n * @param {Object} [props.styles] - slot inline styles for headless styling\n * @param {Object} [props.renderers] - primitive render overrides: { Container, Box, Button, Input, Select, Textarea, Text, Heading, VStack, HStack, Card, Alert, Label }\n * @param {Function} props.onSave - Callback when save is triggered (nestedData, flatData) => void\n * @param {Function} props.onCancel - Callback when cancel is triggered () => void\n * @param {Function} props.onFieldChange - Callback when field changes (key, value, fullData) => void\n * @param {string} props.saveButtonText - Text for save button\n * @param {string} props.cancelButtonText - Text for cancel button\n * @param {string} props.initialJson - Initial JSON string\n * @param {Object} props.customStyles - Custom styles object\n * @param {boolean} props.showControls - Whether to show save/cancel buttons\n * @param {boolean} props.inlineLabels - Whether to render labels inline with fields\n * @param {number} props.columns - Number of columns for form layout (default: 2)\n * @param {Object} props.fieldConfig - Field configuration for custom input types\n * @param {Array} [props.sections] - Optional sections to group fields: [{ id?, title, description?, fields: string[], collapsible?: boolean, defaultOpen?: boolean }]\n * @param {boolean} [props.includeUnsectioned=false] - If true, render fields not listed in sections under an \"Other\" section\n * @param {string} [props.unsectionedTitle='Other'] - Title for the unsectioned fields section\n */\nconst Fields = ({\n  // headless styling hooks\n  _classNames = {},\n  styles: _styleProps = {},\n  renderers = {},\n  // advanced overrides\n  customFieldRenderers = {}, // map of fieldKey => (ctx) => ReactNode\n  customInputRenderers = {}, // map of type => (ctx) => ReactNode\n  customControlRenderers = {}, // map of fieldKey or type => (ctx) => ReactNode (returns just control)\n  customLabelRenderers = {}, // map of fieldKey or type => (ctx) => ReactNode (returns just label)\n  // deprecated uiLibrary (ignored in headless; kept for backward compat)\n  uiLibrary = 'chakra',\n  onSave,\n  onCancel,\n  onFieldChange,\n  saveButtonText = 'Save Changes',\n  cancelButtonText = 'Reset Form',\n  initialJson = '',\n  customStyles = {},\n  showControls = true,\n  inlineLabels = false,\n  columns = 2,\n  fieldConfig = {},\n  sections = null,\n  includeUnsectioned = false,\n  unsectionedTitle = 'Other',\n  ...props\n}) => {\n  // mark intentionally unused headless props to satisfy lint\n  _classNames\n  _styleProps\n  const [jsonInput, setJsonInput] = useState(initialJson)\n  const [formData, setFormData] = useState({})\n  const [originalFormData, setOriginalFormData] = useState({})\n  const [, setParsedJson] = useState(null)\n  const [error, setError] = useState('')\n  // Local input state for tags fields keyed by field name\n  const [tagInputs, setTagInputs] = useState({})\n  // Open state for collapsible sections\n  const [sectionOpenIds, setSectionOpenIds] = useState(() => new Set())\n\n  // Headless primitives; can be overridden by `renderers`\n  const UI = {\n    Container: renderers.Container || 'div',\n    Box: renderers.Box || 'div',\n    Button: renderers.Button || 'button',\n    Input: renderers.Input || 'input',\n    Select: renderers.Select || 'select',\n    Textarea: renderers.Textarea || 'textarea',\n    Text: renderers.Text || 'span',\n    Heading: renderers.Heading || 'h2',\n    VStack: renderers.VStack || 'div',\n    HStack: renderers.HStack || 'div',\n    Card: renderers.Card || 'div',\n    Alert: renderers.Alert || 'div',\n    Label: renderers.Label || 'label',\n  }\n\n  // Segment field renderer (single-select segmented control)\n  const renderSegmentField = (key, value, displayName, fieldTypeConfig) => {\n    const ctx = {\n      key,\n      value,\n      displayName,\n      fieldTypeConfig,\n      formData,\n      onChange: (val) => handleFieldChange(key, val),\n      UI,\n      props: { uiLibrary, customStyles, inlineLabels, ...props },\n    }\n\n    const labelEl =\n      (typeof customLabelRenderers?.[key] === 'function' && customLabelRenderers[key](ctx)) ||\n      (typeof customLabelRenderers?.segment === 'function' && customLabelRenderers.segment(ctx)) || (\n        <UI.Label className={getUIClasses(uiLibrary, 'Label')} style={{ ...customStyles.fieldLabel, marginBottom: inlineLabels ? 0 : '0.5rem' }}>\n          {displayName}\n        </UI.Label>\n      )\n\n    const controlEl =\n      (typeof customControlRenderers?.[key] === 'function' && customControlRenderers[key](ctx)) ||\n      (typeof customControlRenderers?.segment === 'function' && customControlRenderers.segment(ctx)) || (\n        <UI.HStack\n          className={getUIClasses(uiLibrary, 'HStack')}\n          style={{\n            [inlineLabels ? 'flex' : 'width']: inlineLabels ? 1 : '100%',\n            gap: '0.5rem',\n            flexWrap: 'wrap',\n            ...customStyles.hstack,\n          }}\n        >\n          {(fieldTypeConfig.options || []).map((opt) => {\n            const selected = (formData[key] ?? value) === opt\n            return (\n              <UI.Button\n                key={opt}\n                type=\"button\"\n                onClick={() => handleFieldChange(key, opt)}\n                className={getUIClasses(uiLibrary, 'Button', selected ? 'primary' : 'secondary')}\n                style={{\n                  padding: '6px 10px',\n                  borderRadius: '8px',\n                  border: selected ? '1px solid var(--segment-selected-border, #6366f1)' : '1px solid rgba(0,0,0,0.1)',\n                  background: selected ? 'var(--segment-selected-bg, #eef2ff)' : 'var(--segment-bg, #fff)',\n                  color: selected ? 'var(--segment-selected-fg, #3730a3)' : 'inherit',\n                  cursor: 'pointer',\n                }}\n              >\n                {opt}\n              </UI.Button>\n            )\n          })}\n        </UI.HStack>\n      )\n\n    const { description, placement } = getDescriptionMeta(key, fieldTypeConfig)\n    const descEl = description ? (\n      <UI.Text className={getUIClasses(uiLibrary, 'Text')} style={{ fontSize: '12px', opacity: 0.8, marginTop: '0.25rem' }}>\n        {description}\n      </UI.Text>\n    ) : null\n\n    return (\n      <UI.Box\n        key={key}\n        className={getUIClasses(uiLibrary, 'Box')}\n        style={{ marginBottom: '1rem', ...customStyles.fieldContainer }}\n      >\n        {inlineLabels ? (\n          <UI.Box style={{ display: 'flex', alignItems: 'center', gap: '0.75rem' }}>\n            <UI.Box style={{ minWidth: '30%' }}>{labelEl}</UI.Box>\n            <UI.Box style={{ display: 'flex', flexDirection: 'column', flex: 1 }}>\n              {controlEl}\n              {descEl}\n            </UI.Box>\n          </UI.Box>\n        ) : (\n          <>\n            {labelEl}\n            {placement === 'label' ? descEl : null}\n            {controlEl}\n            {placement === 'input' ? descEl : null}\n          </>\n        )}\n      </UI.Box>\n    )\n  }\n\n  // Key-Value list renderer (generic object/array of objects)\n  const renderKeyValueListField = (key, value, displayName, fieldTypeConfig = {}) => {\n    const originalIsArray = Array.isArray(value)\n    const originalIsObjectMap = !originalIsArray && typeof value === 'object' && value !== null\n\n    // Normalize to array of row objects for editing\n    const rows = (() => {\n      if (originalIsArray) return value\n      if (originalIsObjectMap) return Object.entries(value).map(([k, v]) => ({ key: k, value: v }))\n      return []\n    })()\n\n    // Determine columns to render\n    let columns = []\n    if (rows.length) {\n      const set = new Set()\n      rows.forEach((r) => Object.keys(r || {}).forEach((k) => set.add(k)))\n      columns = Array.from(set)\n    } else if (Array.isArray(fieldTypeConfig.columns)) {\n      columns = fieldTypeConfig.columns\n    } else if (originalIsObjectMap) {\n      columns = ['key', 'value']\n    } else {\n      columns = ['key', 'value'] // sensible default\n    }\n\n    // Helpers to rebuild the original shape\n    const commit = (nextRows) => {\n      if (originalIsArray) {\n        handleFieldChange(key, nextRows)\n      } else if (originalIsObjectMap) {\n        const nextObj = {}\n        nextRows.forEach((r) => {\n          const k = r.key ?? r.name\n          const v = r.value ?? r.val\n          if (k !== undefined && k !== '') nextObj[k] = v\n        })\n        handleFieldChange(key, nextObj)\n      } else {\n        handleFieldChange(key, nextRows)\n      }\n    }\n\n    const updateCell = (rowIdx, colKey, val) => {\n      const next = rows.map((r, i) => (i === rowIdx ? { ...r, [colKey]: val } : r))\n      commit(next)\n    }\n\n    const addRow = () => {\n      const template = columns.reduce((acc, c) => ({ ...acc, [c]: '' }), {})\n      commit([...rows, template])\n    }\n\n    const removeRow = (idx) => {\n      const next = rows.filter((_, i) => i !== idx)\n      commit(next)\n    }\n\n    const gridRow = {\n      display: 'grid',\n      gridTemplateColumns: `${'1fr '.repeat(columns.length)}auto`.trim(),\n      gap: '0.5rem',\n      alignItems: 'center',\n      padding: '3px 0px',\n    }\n\n    const { description, placement } = getDescriptionMeta(key, fieldTypeConfig)\n    const descEl = description ? (\n      <UI.Text className={getUIClasses(uiLibrary, 'Text')} style={{ fontSize: '12px', opacity: 0.8, marginBottom: '0.5rem' }}>\n        {description}\n      </UI.Text>\n    ) : null\n    return (\n      <UI.Box\n        key={key}\n        className={getUIClasses(uiLibrary, 'Box')}\n        style={{ marginBottom: '1rem', ...customStyles.fieldContainer }}\n      >\n        <UI.Label\n          className={getUIClasses(uiLibrary, 'Label')}\n          style={{\n            display: 'block',\n            fontWeight: '600',\n            marginBottom: '0.5rem',\n            ...customStyles.fieldLabel,\n          }}\n        >\n          {displayName}\n        </UI.Label>\n        {placement === 'label' ? descEl : null}\n\n        {/* Header row (optional) */}\n        {fieldTypeConfig.showHeader !== false && (\n          <UI.Box style={{ ...gridRow, fontSize: '12px', opacity: 0.8 }}>\n            {columns.map((c) => (\n              <UI.Text key={`hdr-${c}`}>{c}</UI.Text>\n            ))}\n            <span />\n          </UI.Box>\n        )}\n\n        <UI.VStack style={{ gap: '0.5rem' }}>\n          {rows.map((row, idx) => (\n            <UI.Box key={`${key}-${idx}`} style={gridRow}>\n              {columns.map((c) => (\n                <UI.Input\n                  key={`${key}-${idx}-${c}`}\n                  type=\"text\"\n                  placeholder={c}\n                  value={row?.[c] ?? ''}\n                  onChange={(e) => updateCell(idx, c, e.target.value)}\n                  className={getUIClasses(uiLibrary, 'Input')}\n                  style={customStyles.input}\n                />\n              ))}\n              <UI.Button\n                aria-label={`Remove ${displayName} row ${idx + 1}`}\n                onClick={() => removeRow(idx)}\n                className={getUIClasses(uiLibrary, 'Button', 'secondary')}\n                style={{ padding: '6px 10px' }}\n              >\n                ×\n              </UI.Button>\n            </UI.Box>\n          ))}\n\n          <UI.Button\n            onClick={addRow}\n            className={getUIClasses(uiLibrary, 'Button', 'default')}\n            style={{ alignSelf: 'flex-start', padding: '6px 10px' }}\n          >\n            + Add {displayName}\n          </UI.Button>\n        </UI.VStack>\n        {placement === 'input' ? descEl : null}\n      </UI.Box>\n    )\n  }\n\n  // Use adapter class mapping for tailwind/shadcn; Chakra returns empty string\n  const getUIClasses = (lib, component, variant) => _getUIClasses(lib, component, variant)\n\n  // Helper: resolve description text and placement for a field\n  // placement: 'label' (default) or 'input'\n  const getDescriptionMeta = (key, fieldTypeConfig = {}) => {\n    const cfg = fieldConfig?.[key] || {}\n    const description = fieldTypeConfig.description ?? cfg.description\n    const placementRaw = fieldTypeConfig.descriptionPlacement ?? cfg.descriptionPlacement\n    const placement = placementRaw === 'input' ? 'input' : 'label'\n    return { description, placement }\n  }\n\n  const parseJson = useCallback(\n    (jsonString = jsonInput) => {\n      const result = parseJsonSafely(jsonString)\n\n      if (result.success) {\n        setParsedJson(result.data)\n        const flattened = flattenObject(result.data)\n        setFormData(flattened)\n        setOriginalFormData({ ...flattened })\n        setError('')\n      } else {\n        setError(result.error)\n        setParsedJson(null)\n        setFormData({})\n        setOriginalFormData({})\n      }\n    },\n    [jsonInput],\n  )\n\n  useEffect(() => {\n    if (initialJson) {\n      setJsonInput(initialJson)\n      parseJson(initialJson)\n    } else if (initialJson === '') {\n      // Clear everything when initialJson is explicitly set to empty string\n      setJsonInput('')\n      setFormData({})\n      setOriginalFormData({})\n      setParsedJson(null)\n      setError('')\n    }\n  }, [initialJson, parseJson])\n\n  \n\n  const handleFieldChange = (key, value) => {\n    const newFormData = {\n      ...formData,\n      [key]: value,\n    }\n    setFormData(newFormData)\n\n    if (onFieldChange) {\n      const nestedData = unflattenObject(newFormData)\n      onFieldChange(key, value, nestedData)\n    }\n  }\n\n  const handleSave = () => {\n    if (onSave) {\n      const nestedData = unflattenObject(formData)\n      onSave(nestedData, formData)\n    }\n  }\n\n  const handleCancel = () => {\n    setFormData({ ...originalFormData })\n    if (onCancel) {\n      onCancel()\n    }\n  }\n\n  const renderFormField = (key, value) => {\n    const fieldTypeConfig = getInputType(value, key, fieldConfig)\n    const displayName = getDisplayName(key)\n\n    // Parent-aware renderer context\n    const rendererCtx = {\n      key,\n      value,\n      displayName,\n      fieldTypeConfig,\n      formData,\n      onChange: (val) => handleFieldChange(key, val),\n      UI,\n      props: {\n        uiLibrary,\n        onSave,\n        onCancel,\n        onFieldChange,\n        saveButtonText,\n        cancelButtonText,\n        initialJson,\n        customStyles,\n        showControls,\n        inlineLabels,\n        columns,\n        fieldConfig,\n        sections,\n        includeUnsectioned,\n        unsectionedTitle,\n        ...props,\n      },\n    }\n\n    // 1) Per-field override takes precedence\n    const fieldOverride = customFieldRenderers?.[key]\n    if (typeof fieldOverride === 'function') {\n      return <React.Fragment key={key}>{fieldOverride(rendererCtx)}</React.Fragment>\n    }\n\n    // 2) Per-type override next\n    const typeOverride = customInputRenderers?.[fieldTypeConfig.type]\n    if (typeof typeOverride === 'function') {\n      return <React.Fragment key={key}>{typeOverride(rendererCtx)}</React.Fragment>\n    }\n\n    // Handle different field types based on configuration\n    switch (fieldTypeConfig.type) {\n      case 'checkbox':\n        return renderCheckboxField(key, value, displayName, fieldTypeConfig)\n      case 'select':\n        return renderSelectField(key, value, displayName, fieldTypeConfig)\n      case 'segment':\n        return renderSegmentField(key, value, displayName, fieldTypeConfig)\n      case 'multi-select':\n        return renderMultiSelectField(key, value, displayName, fieldTypeConfig)\n      case 'textarea':\n        return renderTextareaField(key, value, displayName, fieldTypeConfig)\n      case 'email':\n      case 'url':\n      case 'date':\n      case 'password':\n        return renderSpecialInputField(key, value, displayName, fieldTypeConfig)\n      case 'number':\n        return renderNumberField(key, value, displayName, fieldTypeConfig)\n      case 'slider':\n        return renderSliderField(key, value, displayName, fieldTypeConfig)\n      case 'tags':\n        return _renderTagsField(key, value, displayName, fieldTypeConfig)\n      case 'key-value-list':\n        return renderKeyValueListField(key, value, displayName, fieldTypeConfig)\n      case 'array':\n        return renderArrayField(key, value, displayName, fieldTypeConfig)\n      case 'object':\n        return renderObjectField(key, value, displayName, fieldTypeConfig)\n      default:\n        return renderTextInputField(key, value, displayName, fieldTypeConfig)\n    }\n  }\n\n  // Slider field renderer (HTML range input)\n  const renderSliderField = (key, value, displayName, fieldTypeConfig) => {\n    const min = fieldTypeConfig.min ?? 0\n    const max = fieldTypeConfig.max ?? 100\n    const step = fieldTypeConfig.step ?? 1\n    const current = typeof formData[key] === 'number' ? formData[key] : (fieldTypeConfig.default ?? min)\n\n    const { description, placement } = getDescriptionMeta(key, fieldTypeConfig)\n    const descEl = description ? (\n      <UI.Text className={getUIClasses(uiLibrary, 'Text')} style={{ fontSize: '12px', opacity: 0.8, marginTop: '0.25rem', marginBottom: placement === 'label' ? '0.5rem' : 0 }}>\n        {description}\n      </UI.Text>\n    ) : null\n    return (\n      <UI.Box\n        key={key}\n        className={getUIClasses(uiLibrary, 'Box')}\n        style={{ marginBottom: '1rem', ...customStyles.fieldContainer }}\n      >\n        <UI.Label className={getUIClasses(uiLibrary, 'Label')} style={customStyles.label}>\n          <UI.Text className={getUIClasses(uiLibrary, 'Text')} style={{ fontWeight: '500', ...customStyles.fieldLabel }}>\n            {displayName}\n          </UI.Text>\n        </UI.Label>\n        {placement === 'label' ? descEl : null}\n        <div style={{ display: 'flex', alignItems: 'center', gap: '0.75rem' }}>\n          <input\n            type=\"range\"\n            min={min}\n            max={max}\n            step={step}\n            value={current}\n            onChange={(e) => handleFieldChange(key, Number(e.target.value))}\n            className={getUIClasses(uiLibrary, 'Input', 'range')}\n            style={{ width: '100%' }}\n          />\n          <UI.Text className={getUIClasses(uiLibrary, 'Text')} style={{ minWidth: '3rem', textAlign: 'right' }}>\n            {current}\n          </UI.Text>\n        </div>\n        {placement === 'input' ? descEl : null}\n      </UI.Box>\n    )\n  }\n\n  // Checkbox field renderer\n  const renderCheckboxField = (key, value, displayName) => {\n    const ctx = {\n      key,\n      value,\n      displayName,\n      fieldTypeConfig: { type: 'checkbox' },\n      formData,\n      onChange: (val) => handleFieldChange(key, val),\n      UI,\n      props: { uiLibrary, customStyles, inlineLabels, ...props },\n    }\n    const labelNode =\n      (typeof customLabelRenderers?.[key] === 'function' && customLabelRenderers[key](ctx)) ||\n      (typeof customLabelRenderers?.checkbox === 'function' && customLabelRenderers.checkbox(ctx)) || (\n        <UI.Text\n          className={getUIClasses(uiLibrary, 'Text')}\n          style={{ fontWeight: '500', ...customStyles.fieldLabel }}\n        >\n          {displayName}\n        </UI.Text>\n      )\n\n    const controlNode =\n      (typeof customControlRenderers?.[key] === 'function' && customControlRenderers[key](ctx)) ||\n      (typeof customControlRenderers?.checkbox === 'function' && customControlRenderers.checkbox(ctx)) || (\n        <input\n          type=\"checkbox\"\n          checked={formData[key] || false}\n          onChange={(e) => handleFieldChange(key, e.target.checked)}\n          className={getUIClasses(uiLibrary, 'Input', 'checkbox')}\n          style={customStyles.checkbox}\n        />\n      )\n\n    const { description, placement } = getDescriptionMeta(key, { type: 'checkbox', ...fieldConfig?.[key] })\n    const descEl = description ? (\n      <UI.Text className={getUIClasses(uiLibrary, 'Text')} style={{ fontSize: '12px', opacity: 0.8, marginTop: '4px' }}>\n        {description}\n      </UI.Text>\n    ) : null\n    return (\n      <UI.Box\n        key={key}\n        className={getUIClasses(uiLibrary, 'Box')}\n        style={{ marginBottom: '1rem', ...customStyles.fieldContainer }}\n      >\n        {placement === 'label' ? descEl : null}\n        <UI.Label\n          className={getUIClasses(uiLibrary, 'Label')}\n          style={{\n            display: 'flex',\n            alignItems: 'center',\n            gap: '0.5rem',\n            cursor: 'pointer',\n            ...customStyles.label,\n          }}\n        >\n          {controlNode}\n          {labelNode}\n        </UI.Label>\n        {placement === 'input' ? descEl : null}\n      </UI.Box>\n    )\n  }\n\n  // Select field renderer\n  const renderSelectField = (key, value, displayName, fieldTypeConfig) => {\n    const ctx = {\n      key,\n      value,\n      displayName,\n      fieldTypeConfig,\n      formData,\n      onChange: (val) => handleFieldChange(key, val),\n      UI,\n      props: { uiLibrary, customStyles, inlineLabels, ...props },\n    }\n    const labelEl =\n      (typeof customLabelRenderers?.[key] === 'function' && customLabelRenderers[key](ctx)) ||\n      (typeof customLabelRenderers?.select === 'function' && customLabelRenderers.select(ctx)) || (\n        <UI.Label className={getUIClasses(uiLibrary, 'Label')} style={{ ...customStyles.fieldLabel, marginBottom: inlineLabels ? 0 : '0.5rem' }}>\n          {displayName}\n        </UI.Label>\n      )\n    const controlEl =\n      (typeof customControlRenderers?.[key] === 'function' && customControlRenderers[key](ctx)) ||\n      (typeof customControlRenderers?.select === 'function' && customControlRenderers.select(ctx)) || (\n        <UI.Select\n          value={formData[key] || ''}\n          onChange={(e) => handleFieldChange(key, e.target.value)}\n          className={getUIClasses(uiLibrary, 'Select')}\n          style={{ [inlineLabels ? 'flex' : 'width']: inlineLabels ? 1 : '100%', ...customStyles.select }}\n        >\n          <option value=\"\">Select {displayName}</option>\n          {fieldTypeConfig.options?.map((option) => (\n            <option key={option} value={option}>\n              {option}\n            </option>\n          ))}\n        </UI.Select>\n      )\n    const { description, placement } = getDescriptionMeta(key, fieldTypeConfig)\n    const descEl = description ? (\n      <UI.Text className={getUIClasses(uiLibrary, 'Text')} style={{ fontSize: '12px', opacity: 0.8, marginTop: '0.25rem' }}>\n        {description}\n      </UI.Text>\n    ) : null\n    return (\n      <UI.Box\n        key={key}\n        className={getUIClasses(uiLibrary, 'Box')}\n        style={{ marginBottom: '1rem', ...customStyles.fieldContainer }}\n      >\n        {inlineLabels ? (\n          <UI.Box style={{ display: 'flex', alignItems: 'center', gap: '0.75rem' }}>\n            <UI.Box style={{ minWidth: '30%' }}>{labelEl}</UI.Box>\n            <UI.Box style={{ display: 'flex', flexDirection: 'column', flex: 1 }}>\n              {controlEl}\n              {descEl}\n            </UI.Box>\n          </UI.Box>\n        ) : (\n          <>\n            {labelEl}\n            {placement === 'label' ? descEl : null}\n            {controlEl}\n            {placement === 'input' ? descEl : null}\n          </>\n        )}\n      </UI.Box>\n    )\n  }\n\n  // Multi-select field renderer\n  const renderMultiSelectField = (key, value, displayName, fieldTypeConfig) => {\n    const selectedValues = Array.isArray(formData[key]) ? formData[key] : []\n    const { description, placement } = getDescriptionMeta(key, fieldTypeConfig)\n    const descEl = description ? (\n      <UI.Text className={getUIClasses(uiLibrary, 'Text')} style={{ fontSize: '12px', opacity: 0.8, marginTop: '0.25rem', marginBottom: placement === 'label' ? '0.5rem' : 0 }}>\n        {description}\n      </UI.Text>\n    ) : null\n\n    return (\n      <UI.Box\n        key={key}\n        className={getUIClasses(uiLibrary, 'Box')}\n        style={{ marginBottom: '1rem', ...customStyles.fieldContainer }}\n      >\n        <UI.Label\n          className={getUIClasses(uiLibrary, 'Label')}\n          style={{\n            display: 'block',\n            fontWeight: '600',\n            marginBottom: '0.5rem',\n            ...customStyles.fieldLabel,\n          }}\n        >\n          {displayName}\n        </UI.Label>\n        {placement === 'label' ? descEl : null}\n        <UI.Box style={{ display: 'flex', flexDirection: 'column', gap: '0.5rem' }}>\n          {fieldTypeConfig.options?.map((option) => (\n            <UI.Label\n              key={option}\n              style={{ display: 'flex', alignItems: 'center', gap: '0.5rem', cursor: 'pointer' }}\n            >\n              <input\n                type=\"checkbox\"\n                checked={selectedValues.includes(option)}\n                onChange={(e) => {\n                  const newValues = e.target.checked\n                    ? [...selectedValues, option]\n                    : selectedValues.filter((v) => v !== option)\n                  handleFieldChange(key, newValues)\n                }}\n                style={customStyles.checkbox}\n              />\n              <UI.Text style={{ fontSize: '14px', ...customStyles.text }}>{option}</UI.Text>\n            </UI.Label>\n          ))}\n        </UI.Box>\n        {placement === 'input' ? descEl : null}\n      </UI.Box>\n    )\n  }\n\n  // Textarea field renderer\n  const renderTextareaField = (key, value, displayName, fieldTypeConfig) => {\n    const ctx = {\n      key,\n      value,\n      displayName,\n      fieldTypeConfig,\n      formData,\n      onChange: (val) => handleFieldChange(key, val),\n      UI,\n      props: { uiLibrary, customStyles, inlineLabels, ...props },\n    }\n    const labelEl =\n      (typeof customLabelRenderers?.[key] === 'function' && customLabelRenderers[key](ctx)) ||\n      (typeof customLabelRenderers?.textarea === 'function' && customLabelRenderers.textarea(ctx)) || (\n        <UI.Label className={getUIClasses(uiLibrary, 'Label')} style={{ ...customStyles.fieldLabel, marginBottom: inlineLabels ? 0 : '0.5rem' }}>\n          {displayName}\n        </UI.Label>\n      )\n    const controlEl =\n      (typeof customControlRenderers?.[key] === 'function' && customControlRenderers[key](ctx)) ||\n      (typeof customControlRenderers?.textarea === 'function' && customControlRenderers.textarea(ctx)) || (\n        <UI.Textarea\n          value={formData[key] || ''}\n          onChange={(e) => handleFieldChange(key, e.target.value)}\n          className={getUIClasses(uiLibrary, 'Textarea')}\n          style={{\n            [inlineLabels ? 'flex' : 'width']: inlineLabels ? 1 : '100%',\n            minHeight: `${(fieldTypeConfig.rows || 4) * 1.5}rem`,\n            ...customStyles.textarea,\n          }}\n        />\n      )\n    const { description, placement } = getDescriptionMeta(key, fieldTypeConfig)\n    const descEl = description ? (\n      <UI.Text className={getUIClasses(uiLibrary, 'Text')} style={{ fontSize: '12px', opacity: 0.8, marginTop: '0.25rem' }}>\n        {description}\n      </UI.Text>\n    ) : null\n    return (\n      <UI.Box\n        key={key}\n        className={getUIClasses(uiLibrary, 'Box')}\n        style={{ marginBottom: '1rem', ...customStyles.fieldContainer }}\n      >\n        {inlineLabels ? (\n          <UI.Box style={{ display: 'flex', alignItems: 'flex-start', gap: '0.75rem' }}>\n            <UI.Box style={{ minWidth: '30%' }}>{labelEl}</UI.Box>\n            <UI.Box style={{ display: 'flex', flexDirection: 'column', flex: 1 }}>\n              {controlEl}\n              {descEl}\n            </UI.Box>\n          </UI.Box>\n        ) : (\n          <>\n            {labelEl}\n            {placement === 'label' ? descEl : null}\n            {controlEl}\n            {placement === 'input' ? descEl : null}\n          </>\n        )}\n      </UI.Box>\n    )\n  }\n\n  // Special input field renderer (email, url, date, password)\n  const renderSpecialInputField = (key, value, displayName, fieldTypeConfig) => {\n    const ctx = {\n      key,\n      value,\n      displayName,\n      fieldTypeConfig,\n      formData,\n      onChange: (val) => handleFieldChange(key, val),\n      UI,\n      props: { uiLibrary, customStyles, inlineLabels, ...props },\n    }\n    const labelEl =\n      (typeof customLabelRenderers?.[key] === 'function' && customLabelRenderers[key](ctx)) ||\n      (typeof customLabelRenderers?.[fieldTypeConfig.type] === 'function' && customLabelRenderers[fieldTypeConfig.type](ctx)) || (\n        <UI.Label className={getUIClasses(uiLibrary, 'Label')} style={{ ...customStyles.fieldLabel, marginBottom: inlineLabels ? 0 : '0.5rem' }}>\n          {displayName}\n        </UI.Label>\n      )\n    const controlEl =\n      (typeof customControlRenderers?.[key] === 'function' && customControlRenderers[key](ctx)) ||\n      (typeof customControlRenderers?.[fieldTypeConfig.type] === 'function' && customControlRenderers[fieldTypeConfig.type](ctx)) || (\n        <UI.Input\n          type={fieldTypeConfig.type}\n          value={formData[key] || ''}\n          onChange={(e) => handleFieldChange(key, e.target.value)}\n          className={getUIClasses(uiLibrary, 'Input')}\n          style={{ [inlineLabels ? 'flex' : 'width']: inlineLabels ? 1 : '100%', ...customStyles.input }}\n        />\n      )\n    const descEl = fieldTypeConfig.description ? (\n      <UI.Text className={getUIClasses(uiLibrary, 'Text')} style={{ fontSize: '12px', opacity: 0.8, marginTop: inlineLabels ? '0.25rem' : '0.25rem', marginBottom: inlineLabels ? 0 : '0.25rem' }}>\n        {fieldTypeConfig.description}\n      </UI.Text>\n    ) : null\n    return (\n      <UI.Box\n        key={key}\n        className={getUIClasses(uiLibrary, 'Box')}\n        style={{ marginBottom: '1rem', ...customStyles.fieldContainer }}\n      >\n        {inlineLabels ? (\n          <UI.Box style={{ display: 'flex', alignItems: 'center', gap: '0.75rem' }}>\n            <UI.Box style={{ minWidth: '30%' }}>{labelEl}</UI.Box>\n            <UI.Box style={{ display: 'flex', flexDirection: 'column', flex: 1 }}>\n              {controlEl}\n              {descEl}\n            </UI.Box>\n          </UI.Box>\n        ) : (\n          <>\n            {labelEl}\n            {descEl}\n            {controlEl}\n          </>\n        )}\n      </UI.Box>\n    )\n  }\n\n  // Number field renderer\n  const renderNumberField = (key, value, displayName) => {\n    const ctx = {\n      key,\n      value,\n      displayName,\n      fieldTypeConfig: { type: 'number' },\n      formData,\n      onChange: (val) => handleFieldChange(key, val),\n      UI,\n      props: { uiLibrary, customStyles, inlineLabels, ...props },\n    }\n    const labelEl =\n      (typeof customLabelRenderers?.[key] === 'function' && customLabelRenderers[key](ctx)) ||\n      (typeof customLabelRenderers?.number === 'function' && customLabelRenderers.number(ctx)) || (\n        <UI.Label\n          className={getUIClasses(uiLibrary, 'Label')}\n          style={{ display: 'block', fontWeight: '600', marginBottom: inlineLabels ? 0 : '0.5rem', ...customStyles.fieldLabel }}\n        >\n          {displayName}\n        </UI.Label>\n      )\n    const controlEl =\n      (typeof customControlRenderers?.[key] === 'function' && customControlRenderers[key](ctx)) ||\n      (typeof customControlRenderers?.number === 'function' && customControlRenderers.number(ctx)) || (\n        <UI.Input\n          type=\"number\"\n          value={formData[key] || ''}\n          onChange={(e) => {\n            const val = parseFloat(e.target.value) || 0\n            handleFieldChange(key, val)\n          }}\n          className={getUIClasses(uiLibrary, 'Input')}\n          style={{ [inlineLabels ? 'flex' : 'width']: inlineLabels ? 1 : '100%', ...customStyles.input }}\n        />\n      )\n    const { description, placement } = getDescriptionMeta(key, { type: 'number', ...fieldConfig?.[key] })\n    const descEl = description ? (\n      <UI.Text className={getUIClasses(uiLibrary, 'Text')} style={{ fontSize: '12px', opacity: 0.8, marginTop: '0.25rem' }}>\n        {description}\n      </UI.Text>\n    ) : null\n    return (\n      <UI.Box\n        key={key}\n        className={getUIClasses(uiLibrary, 'Box')}\n        style={{ marginBottom: '1rem', ...customStyles.fieldContainer }}\n      >\n        {inlineLabels ? (\n          <UI.Box style={{ display: 'flex', alignItems: 'center', gap: '0.75rem' }}>\n            <UI.Box style={{ minWidth: '30%' }}>{labelEl}</UI.Box>\n            <UI.Box style={{ display: 'flex', flexDirection: 'column', flex: 1 }}>\n              {controlEl}\n              {descEl}\n            </UI.Box>\n          </UI.Box>\n        ) : (\n          <>\n            {labelEl}\n            {placement === 'label' ? descEl : null}\n            {controlEl}\n            {placement === 'input' ? descEl : null}\n          </>\n        )}\n      </UI.Box>\n    )\n  }\n\n  // Array field renderer\n  const renderArrayField = (key, value, displayName, fieldTypeConfig) => {\n    const arr = Array.isArray(value) ? value : []\n    const isStringArray = arr.every((v) => typeof v === 'string')\n\n    // If it's an array of strings, render as pill chips with add/delete\n    if (isStringArray) {\n      const tags = Array.isArray(formData[key]) ? formData[key] : []\n      const newTag = tagInputs[key] || ''\n\n      const addTag = (tag) => {\n        const t = (tag || '').trim()\n        if (!t) return\n        if (tags.includes(t)) return\n        handleFieldChange(key, [...tags, t])\n        setTagInputs((prev) => ({ ...prev, [key]: '' }))\n      }\n\n      const removeTag = (tag) => {\n        handleFieldChange(\n          key,\n          tags.filter((t) => t !== tag),\n        )\n      }\n\n      const onKeyDown = (e) => {\n        if (e.key === 'Enter' || e.key === ',') {\n          e.preventDefault()\n          addTag(newTag)\n        } else if (e.key === 'Backspace' && !newTag && tags.length) {\n          removeTag(tags[tags.length - 1])\n        }\n      }\n\n      const pillStyle = {\n        display: 'inline-flex',\n        alignItems: 'center',\n        gap: '6px',\n        padding: '4px 8px',\n        borderRadius: '999px',\n        background: '#eef2ff',\n        color: '#3730a3',\n        border: '1px solid #c7d2fe',\n        fontSize: '12px',\n      }\n\n      const pillCloseStyle = {\n        cursor: 'pointer',\n        border: 'none',\n        background: 'transparent',\n        color: '#4338ca',\n        fontSize: '14px',\n        lineHeight: 1,\n      }\n\n      const { description, placement } = getDescriptionMeta(key, fieldTypeConfig)\n      const descEl = description ? (\n        <UI.Text className={getUIClasses(uiLibrary, 'Text')} style={{ fontSize: '12px', opacity: 0.8, marginBottom: '0.5rem' }}>\n          {description}\n        </UI.Text>\n      ) : null\n      return (\n        <UI.Box\n          key={key}\n          className={getUIClasses(uiLibrary, 'Box')}\n          style={{ marginBottom: '1rem', ...customStyles.fieldContainer }}\n        >\n          <UI.Label\n            className={getUIClasses(uiLibrary, 'Label')}\n            style={{\n              display: 'block',\n              fontWeight: '600',\n              marginBottom: '0.5rem',\n              ...customStyles.fieldLabel,\n            }}\n          >\n            {displayName}\n          </UI.Label>\n          {placement === 'label' ? descEl : null}\n          <UI.Box style={{ display: 'flex', flexWrap: 'wrap', gap: '8px', alignItems: 'center' }}>\n            {tags.map((tag) => (\n              <span key={tag} style={pillStyle}>\n                {tag}\n                <button\n                  aria-label={`Remove ${tag}`}\n                  onClick={() => removeTag(tag)}\n                  style={pillCloseStyle}\n                >\n                  ×\n                </button>\n              </span>\n            ))}\n            <UI.Input\n              type=\"text\"\n              value={newTag}\n              onChange={(e) => setTagInputs((prev) => ({ ...prev, [key]: e.target.value }))}\n              onKeyDown={onKeyDown}\n              placeholder={fieldTypeConfig.placeholder || `Add ${displayName} and press Enter`}\n              className={getUIClasses(uiLibrary, 'Input')}\n              style={{ minWidth: '140px', flex: '0 1 auto', ...customStyles.input }}\n            />\n            <UI.Button\n              onClick={() => addTag(newTag)}\n              className={getUIClasses(uiLibrary, 'Button', 'secondary')}\n              style={{ padding: '6px 10px' }}\n            >\n              Add\n            </UI.Button>\n          </UI.Box>\n          {placement === 'input' ? descEl : null}\n        </UI.Box>\n      )\n    }\n\n    // Fallback: render as JSON textarea for non-string arrays\n    const { description, placement } = getDescriptionMeta(key, fieldTypeConfig)\n    const descEl = description ? (\n      <UI.Text className={getUIClasses(uiLibrary, 'Text')} style={{ fontSize: '12px', opacity: 0.8, marginBottom: '0.5rem' }}>\n        {description}\n      </UI.Text>\n    ) : null\n    return (\n      <UI.Box\n        key={key}\n        className={getUIClasses(uiLibrary, 'Box')}\n        style={{ marginBottom: '1rem', ...customStyles.fieldContainer }}\n      >\n        <UI.Label\n          className={getUIClasses(uiLibrary, 'Label')}\n          style={{\n            display: 'block',\n            fontWeight: '600',\n            marginBottom: '0.5rem',\n            ...customStyles.fieldLabel,\n          }}\n        >\n          {displayName} (Array)\n        </UI.Label>\n        {placement === 'label' ? descEl : null}\n        <UI.Textarea\n          value={JSON.stringify(value, null, 2)}\n          onChange={(e) => {\n            try {\n              const parsed = JSON.parse(e.target.value)\n              handleFieldChange(key, parsed)\n            } catch {\n              handleFieldChange(key, e.target.value)\n            }\n          }}\n          className={getUIClasses(uiLibrary, 'Textarea')}\n          style={{\n            fontFamily: 'monospace',\n            minHeight: '100px',\n            width: '100%',\n            ...customStyles.textarea,\n          }}\n        />\n        {placement === 'input' ? descEl : null}\n      </UI.Box>\n    )\n  }\n\n  // Tags field renderer (pill chips with delete and input to add)\n  const _renderTagsField = (key, value, displayName, fieldTypeConfig) => {\n    const tags = Array.isArray(formData[key]) ? formData[key] : []\n    const newTag = tagInputs[key] || ''\n\n    const addTag = (tag) => {\n      const t = (tag || '').trim()\n      if (!t) return\n      if (tags.includes(t)) return\n      handleFieldChange(key, [...tags, t])\n      setTagInputs((prev) => ({ ...prev, [key]: '' }))\n    }\n\n    const removeTag = (tag) => {\n      handleFieldChange(\n        key,\n        tags.filter((t) => t !== tag),\n      )\n    }\n\n    const onKeyDown = (e) => {\n      if (e.key === 'Enter' || e.key === ',') {\n        e.preventDefault()\n        addTag(newTag)\n      } else if (e.key === 'Backspace' && !newTag && tags.length) {\n        // quick remove last tag\n        removeTag(tags[tags.length - 1])\n      }\n    }\n\n    const pillStyle = {\n      display: 'inline-flex',\n      alignItems: 'center',\n      gap: '6px',\n      padding: '4px 8px',\n      borderRadius: '999px',\n      background: '#eef2ff',\n      color: '#3730a3',\n      border: '1px solid #c7d2fe',\n      fontSize: '12px',\n    }\n\n    const pillCloseStyle = {\n      cursor: 'pointer',\n      border: 'none',\n      background: 'transparent',\n      color: '#4338ca',\n      fontSize: '14px',\n      lineHeight: 1,\n    }\n\n    const { description, placement } = getDescriptionMeta(key, fieldTypeConfig)\n    const descEl = description ? (\n      <UI.Text className={getUIClasses(uiLibrary, 'Text')} style={{ fontSize: '12px', opacity: 0.8, marginBottom: '0.5rem' }}>\n        {description}\n      </UI.Text>\n    ) : null\n    return (\n      <UI.Box\n        key={key}\n        className={getUIClasses(uiLibrary, 'Box')}\n        style={{ marginBottom: '1rem', ...customStyles.fieldContainer }}\n      >\n        <UI.Label\n          className={getUIClasses(uiLibrary, 'Label')}\n          style={{\n            display: 'block',\n            fontWeight: '600',\n            marginBottom: '0.5rem',\n            ...customStyles.fieldLabel,\n          }}\n        >\n          {displayName}\n        </UI.Label>\n        {placement === 'label' ? descEl : null}\n        <UI.Box style={{ display: 'flex', flexWrap: 'wrap', gap: '8px', alignItems: 'center' }}>\n          {tags.map((tag) => (\n            <span key={tag} style={pillStyle}>\n              {tag}\n              <button\n                aria-label={`Remove ${tag}`}\n                onClick={() => removeTag(tag)}\n                style={pillCloseStyle}\n              >\n                ×\n              </button>\n            </span>\n          ))}\n          <UI.Input\n            type=\"text\"\n            value={newTag}\n            onChange={(e) => setTagInputs((prev) => ({ ...prev, [key]: e.target.value }))}\n            onKeyDown={onKeyDown}\n            placeholder={fieldTypeConfig.placeholder || 'Add tag and press Enter'}\n            className={getUIClasses(uiLibrary, 'Input')}\n            style={{ minWidth: '140px', flex: '0 1 auto', ...customStyles.input }}\n          />\n          <UI.Button\n            onClick={() => addTag(newTag)}\n            className={getUIClasses(uiLibrary, 'Button', 'secondary')}\n            style={{ padding: '6px 10px' }}\n          >\n            Add\n          </UI.Button>\n        </UI.Box>\n        {placement === 'input' ? descEl : null}\n      </UI.Box>\n    )\n  }\n\n  // Object field renderer\n  const renderObjectField = (key, value, displayName) => {\n    const { description, placement } = getDescriptionMeta(key, fieldConfig?.[key] || { type: 'object' })\n    const descEl = description ? (\n      <UI.Text className={getUIClasses(uiLibrary, 'Text')} style={{ fontSize: '12px', opacity: 0.8, marginBottom: '0.5rem' }}>\n        {description}\n      </UI.Text>\n    ) : null\n    return (\n      <UI.Box\n        key={key}\n        className={getUIClasses(uiLibrary, 'Box')}\n        style={{ marginBottom: '1rem', ...customStyles.fieldContainer }}\n      >\n        <UI.Label\n          className={getUIClasses(uiLibrary, 'Label')}\n          style={{\n            display: 'block',\n            fontWeight: '600',\n            marginBottom: '0.5rem',\n            ...customStyles.fieldLabel,\n          }}\n        >\n          {displayName} (Object)\n        </UI.Label>\n        {placement === 'label' ? descEl : null}\n        <UI.Textarea\n          value={JSON.stringify(value, null, 2)}\n          onChange={(e) => {\n            try {\n              const parsed = JSON.parse(e.target.value)\n              handleFieldChange(key, parsed)\n            } catch {\n              // Keep the raw string value for now\n              handleFieldChange(key, e.target.value)\n            }\n          }}\n          className={getUIClasses(uiLibrary, 'Textarea')}\n          style={{\n            fontFamily: 'monospace',\n            minHeight: '100px',\n            width: '100%',\n            ...customStyles.textarea,\n          }}\n        />\n        {placement === 'input' ? descEl : null}\n      </UI.Box>\n    )\n  }\n\n  // Text input field renderer (default)\n  const renderTextInputField = (key, value, displayName) => {\n    const ctx = {\n      key,\n      value,\n      displayName,\n      fieldTypeConfig: { type: 'text' },\n      formData,\n      onChange: (val) => handleFieldChange(key, val),\n      UI,\n      props: { uiLibrary, customStyles, inlineLabels, ...props },\n    }\n    const labelEl =\n      (typeof customLabelRenderers?.[key] === 'function' && customLabelRenderers[key](ctx)) ||\n      (typeof customLabelRenderers?.text === 'function' && customLabelRenderers.text(ctx)) || (\n        <UI.Label\n          className={getUIClasses(uiLibrary, 'Label')}\n          style={{ display: 'block', fontWeight: '600', marginBottom: inlineLabels ? 0 : '0.5rem', ...customStyles.fieldLabel }}\n        >\n          {displayName}\n        </UI.Label>\n      )\n    const controlEl =\n      (typeof customControlRenderers?.[key] === 'function' && customControlRenderers[key](ctx)) ||\n      (typeof customControlRenderers?.text === 'function' && customControlRenderers.text(ctx)) || (\n        <UI.Input\n          type=\"text\"\n          value={formData[key] || ''}\n          onChange={(e) => handleFieldChange(key, e.target.value)}\n          className={getUIClasses(uiLibrary, 'Input')}\n          style={{ [inlineLabels ? 'flex' : 'width']: inlineLabels ? 1 : '100%', ...customStyles.input }}\n        />\n      )\n    const { description, placement } = getDescriptionMeta(key, { type: 'text', ...fieldConfig?.[key] })\n    const descEl = description ? (\n      <UI.Text className={getUIClasses(uiLibrary, 'Text')} style={{ fontSize: '12px', opacity: 0.8, marginTop: '0.25rem' }}>\n        {description}\n      </UI.Text>\n    ) : null\n    return (\n      <UI.Box\n        key={key}\n        className={getUIClasses(uiLibrary, 'Box')}\n        style={{ marginBottom: '1rem', ...customStyles.fieldContainer }}\n      >\n        {inlineLabels ? (\n          <UI.Box style={{ display: 'flex', alignItems: 'center', gap: '0.75rem' }}>\n            <UI.Box style={{ minWidth: '30%' }}>{labelEl}</UI.Box>\n            <UI.Box style={{ display: 'flex', flexDirection: 'column', flex: 1 }}>\n              {controlEl}\n              {descEl}\n            </UI.Box>\n          </UI.Box>\n        ) : (\n          <>\n            {labelEl}\n            {placement === 'label' ? descEl : null}\n            {controlEl}\n            {placement === 'input' ? descEl : null}\n          </>\n        )}\n      </UI.Box>\n    )\n  }\n\n  // Function to render form fields in columns\n  const renderFormFields = () => {\n    // If sections prop is provided, render grouped sections first\n    if (Array.isArray(sections) && sections.length) {\n      const allKeys = Object.keys(formData)\n      const used = new Set()\n      const sectionBlocks = sections.map((sec, idx) => {\n        const secId = sec.id || `section-${idx}`\n        const listed = Array.isArray(sec.fields) ? sec.fields : []\n        listed.forEach((k) => used.add(k))\n        // Build section content honoring columns\n        const sectionKeys = listed.filter((k) => allKeys.includes(k))\n        const content = (() => {\n          if (columns <= 1) {\n            return (\n              <UI.VStack key={secId} style={{ gap: '1rem' }}>\n                {sectionKeys.map((k) => renderFormField(k, formData[k]))}\n              </UI.VStack>\n            )\n          }\n          const fieldsPerColumn = Math.ceil(sectionKeys.length / columns)\n          const columnGroups = []\n          for (let i = 0; i < columns; i++) {\n            const startIndex = i * fieldsPerColumn\n            const endIndex = Math.min(startIndex + fieldsPerColumn, sectionKeys.length)\n            columnGroups.push(sectionKeys.slice(startIndex, endIndex))\n          }\n          const gridStyles = {\n            display: 'grid',\n            gridTemplateColumns: `repeat(${columns}, 1fr)`,\n            gap: '2rem',\n            width: '100%',\n            ...customStyles.formGrid,\n          }\n          return (\n            <UI.Box key={secId} className={getUIClasses(uiLibrary, 'Box')} style={gridStyles}>\n              {columnGroups.map((group, idx) => (\n                <UI.VStack\n                  key={idx}\n                  className={getUIClasses(uiLibrary, 'VStack')}\n                  style={{ gap: '1rem', ...customStyles.formColumn }}\n                >\n                  {group.map((k) => renderFormField(k, formData[k]))}\n                </UI.VStack>\n              ))}\n            </UI.Box>\n          )\n        })()\n\n        const baselineOpen = !!(sec.defaultOpen || !sec.collapsible)\n        const open = sectionOpenIds.has(secId) ? !baselineOpen : baselineOpen\n        const toggle = () =>\n          setSectionOpenIds((prev) => {\n            const next = new Set(prev)\n            if (next.has(secId)) next.delete(secId)\n            else next.add(secId)\n            return next\n          })\n\n        return (\n          <UI.Box key={`wrap-${secId}`} style={{ marginBottom: '1.25rem' }}>\n            <UI.Box\n              style={{\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'space-between',\n                marginBottom: '0.5rem',\n              }}\n            >\n              <UI.Box style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>\n                {sec.collapsible && (\n                  <button\n                    aria-label={`Toggle ${sec.title}`}\n                    onClick={toggle}\n                    style={{ border: 'none', background: 'transparent', cursor: 'pointer' }}\n                  >\n                    <span>{open ? '▼' : '▶'}</span>\n                  </button>\n                )}\n                <UI.Heading className={getUIClasses(uiLibrary, 'Heading')} style={{ margin: 0 }}>\n                  {sec.title}\n                </UI.Heading>\n              </UI.Box>\n              {sec.description && (\n                <UI.Text className={getUIClasses(uiLibrary, 'Text')} style={{ opacity: 0.8 }}>\n                  {sec.description}\n                </UI.Text>\n              )}\n            </UI.Box>\n            {(!sec.collapsible || open) && content}\n          </UI.Box>\n        )\n      })\n\n      // Unsectioned fields\n      let otherBlock = null\n      if (includeUnsectioned) {\n        const remaining = allKeys.filter((k) => !used.has(k))\n        if (remaining.length) {\n          const secId = 'unsectioned'\n          const baselineOpen = true\n          const open = sectionOpenIds.has(secId) ? !baselineOpen : baselineOpen\n          const toggle = () =>\n            setSectionOpenIds((prev) => {\n              const next = new Set(prev)\n              if (next.has(secId)) next.delete(secId)\n              else next.add(secId)\n              return next\n            })\n          otherBlock = (\n            <UI.Box key={`wrap-${secId}`} style={{ marginBottom: '1.25rem' }}>\n              <UI.Box\n                style={{\n                  display: 'flex',\n                  alignItems: 'center',\n                  justifyContent: 'space-between',\n                  marginBottom: '0.5rem',\n                }}\n              >\n                <UI.Box style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>\n                  <button\n                    aria-label={`Toggle ${unsectionedTitle}`}\n                    onClick={toggle}\n                    style={{ border: 'none', background: 'transparent', cursor: 'pointer' }}\n                  >\n                    <span>{open ? '▼' : '▶'}</span>\n                  </button>\n                  <UI.Heading className={getUIClasses(uiLibrary, 'Heading')} style={{ margin: 0 }}>\n                    {unsectionedTitle}\n                  </UI.Heading>\n                </UI.Box>\n              </UI.Box>\n              {open &&\n                (() => {\n                  if (columns <= 1) {\n                    return (\n                      <UI.VStack style={{ gap: '1rem' }}>\n                        {remaining.map((k) => renderFormField(k, formData[k]))}\n                      </UI.VStack>\n                    )\n                  }\n                  const fieldsPerColumn = Math.ceil(remaining.length / columns)\n                  const columnGroups = []\n                  for (let i = 0; i < columns; i++) {\n                    const startIndex = i * fieldsPerColumn\n                    const endIndex = Math.min(startIndex + fieldsPerColumn, remaining.length)\n                    columnGroups.push(remaining.slice(startIndex, endIndex))\n                  }\n                  const gridStyles = {\n                    display: 'grid',\n                    gridTemplateColumns: `repeat(${columns}, 1fr)`,\n                    gap: '2rem',\n                    width: '100%',\n                    ...customStyles.formGrid,\n                  }\n                  return (\n                    <UI.Box className={getUIClasses(uiLibrary, 'Box')} style={gridStyles}>\n                      {columnGroups.map((group, idx) => (\n                        <UI.VStack\n                          key={idx}\n                          className={getUIClasses(uiLibrary, 'VStack')}\n                          style={{ gap: '1rem', ...customStyles.formColumn }}\n                        >\n                          {group.map((k) => renderFormField(k, formData[k]))}\n                        </UI.VStack>\n                      ))}\n                    </UI.Box>\n                  )\n                })()}\n            </UI.Box>\n          )\n        }\n      }\n\n      return (\n        <UI.VStack\n          className={getUIClasses(uiLibrary, 'VStack')}\n          style={{ gap: '1rem', ...customStyles.formStack }}\n        >\n          {sectionBlocks}\n          {otherBlock}\n        </UI.VStack>\n      )\n    }\n\n    const formEntries = Object.entries(formData)\n\n    if (columns <= 1) {\n      // Single column layout (default)\n      return (\n        <UI.VStack\n          className={getUIClasses(uiLibrary, 'VStack')}\n          style={{ gap: '1rem', ...customStyles.formStack }}\n        >\n          {formEntries.map(([key, value]) => renderFormField(key, value))}\n        </UI.VStack>\n      )\n    }\n\n    // Multi-column layout\n    const fieldsPerColumn = Math.ceil(formEntries.length / columns)\n    const columnGroups = []\n\n    for (let i = 0; i < columns; i++) {\n      const startIndex = i * fieldsPerColumn\n      const endIndex = Math.min(startIndex + fieldsPerColumn, formEntries.length)\n      columnGroups.push(formEntries.slice(startIndex, endIndex))\n    }\n\n    const gridStyles = {\n      display: 'grid',\n      gridTemplateColumns: `repeat(${columns}, 1fr)`,\n      gap: '2rem',\n      width: '100%',\n      ...customStyles.formGrid,\n    }\n\n    return (\n      <UI.Box className={getUIClasses(uiLibrary, 'Box')} style={gridStyles}>\n        {columnGroups.map((columnFields, columnIndex) => (\n          <UI.VStack\n            key={columnIndex}\n            className={getUIClasses(uiLibrary, 'VStack')}\n            style={{ gap: '1rem', ...customStyles.formColumn }}\n          >\n            {columnFields.map(([key, value]) => renderFormField(key, value))}\n          </UI.VStack>\n        ))}\n      </UI.Box>\n    )\n  }\n\n  return (\n    <UI.Container\n      className={getUIClasses(uiLibrary, 'Container')}\n      style={customStyles.container}\n      {...props}\n    >\n      <UI.VStack\n        className={getUIClasses(uiLibrary, 'VStack')}\n        style={{ gap: '1rem', ...customStyles.stack }}\n      >\n        \n\n        {error && (\n          <UI.Alert\n            className={getUIClasses(uiLibrary, 'Alert', 'error')}\n            style={customStyles.alert}\n          >\n            <UI.Text style={customStyles.errorText}>{error}</UI.Text>\n          </UI.Alert>\n        )}\n\n        {Object.keys(formData).length > 0 && (\n          <UI.Card\n            className={getUIClasses(uiLibrary, 'Card')}\n            style={{ width: '100%', padding: '1rem', ...customStyles.formCard }}\n          >\n            {renderFormFields()}\n          </UI.Card>\n        )}\n\n        {showControls && Object.keys(formData).length > 0 && (\n          <UI.HStack\n            className={getUIClasses(uiLibrary, 'HStack')}\n            style={{ gap: '0.5rem', marginTop: '1rem', ...customStyles.controlButtons }}\n          >\n            <UI.Button\n              onClick={handleSave}\n              className={getUIClasses(uiLibrary, 'Button', 'default')}\n              style={customStyles.saveButton}\n            >\n              {saveButtonText}\n            </UI.Button>\n            <UI.Button\n              onClick={handleCancel}\n              className={getUIClasses(uiLibrary, 'Button', 'secondary')}\n              style={customStyles.cancelButton}\n            >\n              {cancelButtonText}\n            </UI.Button>\n          </UI.HStack>\n        )}\n      </UI.VStack>\n    </UI.Container>\n  )\n}\n\nexport default Fields\n"],"names":["getUIComponents","Container","Box","Button","Input","Select","Textarea","Table","Thead","Tbody","Tr","Th","Td","Text","Heading","Stack","HStack","VStack","Card","Alert","Badge","Grid","GridItem","Flex","Label","getUIClasses","uiLibrary","arguments","length","undefined","component","variant","libraryClasses","tailwind","default","secondary","checkbox","error","success","warning","info","shadcn","componentClasses","_typeof","flattenObject","obj","prefix","flattened","key","Object","prototype","hasOwnProperty","call","newKey","concat","Array","isArray","assign","unflattenObject","flat","result","keys","split","current","i","getInputType","value","fieldConfig","_objectSpread","type","items","rows","includes","toLowerCase","startsWith","match","parseJsonSafely","jsonString","data","JSON","parse","message","formatJson","spaces","stringify","getNestedLevel","getDisplayName","pop","replace","l","toUpperCase","trim","Fields","_ref","_classNames","styles","_styleProps","_ref$renderers","renderers","_ref$customFieldRende","customFieldRenderers","_ref$customInputRende","customInputRenderers","_ref$customControlRen","customControlRenderers","_ref$customLabelRende","customLabelRenderers","_ref$uiLibrary","onSave","onCancel","onFieldChange","_ref$saveButtonText","saveButtonText","_ref$cancelButtonText","cancelButtonText","_ref$initialJson","initialJson","_ref$customStyles","customStyles","_ref$showControls","showControls","_ref$inlineLabels","inlineLabels","_ref$columns","columns","_ref$fieldConfig","_ref$sections","sections","_ref$includeUnsection","includeUnsectioned","_ref$unsectionedTitle","unsectionedTitle","props","_objectWithoutProperties","_excluded","_useState2","_slicedToArray","useState","jsonInput","setJsonInput","_useState4","formData","setFormData","_useState6","originalFormData","setOriginalFormData","setParsedJson","_useState0","setError","_useState10","tagInputs","setTagInputs","_useState12","Set","sectionOpenIds","setSectionOpenIds","UI","renderKeyValueListField","displayName","fieldTypeConfig","originalIsArray","originalIsObjectMap","entries","map","_ref2","_ref3","set","forEach","r","k","add","from","commit","nextRows","handleFieldChange","nextObj","_r$key","_r$value","name","v","val","gridRow","display","gridTemplateColumns","repeat","gap","alignItems","padding","_getDescriptionMeta2","getDescriptionMeta","description","placement","descEl","_jsx","className","style","fontSize","opacity","marginBottom","children","_jsxs","fieldContainer","fontWeight","fieldLabel","showHeader","c","row","idx","_row$c","placeholder","onChange","e","rowIdx","colKey","target","next","_defineProperty","input","onClick","filter","_","removeRow","template","reduce","acc","_toConsumableArray","alignSelf","lib","_getUIClasses","_fieldTypeConfig$desc","_fieldTypeConfig$desc2","cfg","descriptionPlacement","parseJson","useCallback","useEffect","newFormData","nestedData","renderFormField","rendererCtx","fieldOverride","React","Fragment","typeOverride","renderCheckboxField","renderSelectField","ctx","labelEl","segment","controlEl","hstack","options","opt","_formData$key","selected","borderRadius","border","background","color","cursor","_getDescriptionMeta","marginTop","minWidth","flexDirection","flex","_Fragment","renderSegmentField","renderMultiSelectField","renderTextareaField","renderSpecialInputField","renderNumberField","renderSliderField","_renderTagsField","renderArrayField","renderObjectField","renderTextInputField","_fieldTypeConfig$min","_fieldTypeConfig$max","_fieldTypeConfig$step","_fieldTypeConfig$defa","min","max","step","_getDescriptionMeta3","label","Number","width","textAlign","labelNode","controlNode","checked","_getDescriptionMeta4","_fieldTypeConfig$opti","select","option","_getDescriptionMeta5","_fieldTypeConfig$opti2","selectedValues","_getDescriptionMeta6","newValues","text","textarea","_getDescriptionMeta7","number","parseFloat","_getDescriptionMeta8","every","tags","newTag","addTag","tag","t","prev","removeTag","pillStyle","pillCloseStyle","lineHeight","_getDescriptionMeta9","flexWrap","onKeyDown","preventDefault","_getDescriptionMeta0","parsed","_unused","fontFamily","minHeight","_getDescriptionMeta1","_getDescriptionMeta10","_unused2","_getDescriptionMeta11","container","stack","alert","errorText","formCard","allKeys","used","sectionBlocks","sec","secId","id","listed","fields","sectionKeys","content","fieldsPerColumn","Math","ceil","columnGroups","startIndex","endIndex","push","slice","gridStyles","formGrid","group","formColumn","baselineOpen","defaultOpen","collapsible","open","has","justifyContent","title","margin","otherBlock","remaining","formStack","formEntries","_ref4","_ref5","columnFields","columnIndex","_ref6","_ref7","renderFormFields","controlButtons","saveButton","cancelButton"],"mappings":"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"}